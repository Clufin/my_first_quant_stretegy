# 可以自己import我们平台支持的第三方python模块，比如pandas、numpy等。
import talib
import numpy as np
import math
import pandas
# 在这个方法中编写任何的初始化逻辑。context对象将会在你的算法策略的任何方法之间做传递。
def init(context):
	#基本数据
	
    context.s1 = "000001.XSHE"
	# EMA25与EMA45
    context.SHORTPERIOD = 25
    context.LONGPERIOD = 45

    # 实时打印日志
    logger.info("Interested at stock: " + str(context.s1))
 def handle_bar(context, bar_dict):
    # 开始编写你的主要的算法逻辑

    # bar_dict[order_book_id] 可以拿到某个证券的bar信息
    # context.portfolio 可以拿到现在的投资组合状态信息

    # 使用order_shares(id_or_ins, amount)方法进行落单

    # TODO: 开始编写你的算法吧！

    # 使用talib计算长短两根均线(EMA25与EMA45)，均线以array的格式表达
    short_avg = talib.TMA(prices,context.SHORTPERIOD)
    long_avg = talib.TMA(prices,context.LONGPERIOD)

    plot("short avg",short_avg[-1])
    plot("long avg",long_avg[-1])

    # 计算现在portfolio中股票的仓位
    curPosition = context.portfolio.positions[context.s1].quantity
    # 计算现在portfolio中的现金可以购买多少股票
    shares = context.portfolio.cash/bar_dict[context.s1].close




 # 如果短均线从上往下跌破长均线，也就是在目前的bar短线平均值低于长线平均值，而上一个bar的短线平均值高于长线平均值
   if short_avg[-1]-long_avg[-1]<0 and short_avg[-2]-long_avg[-2]>0 and curPosition>0:
    #进行清仓
        order_target_value(context.s1,0)

    # 如果短均线从下往上突破长均线，为入场信号    
    if short_avg[-1]-long_avg[-1]>0 and short_avg[-2]-long_avg[-2]<0:
    #满仓入股    
        order_shares(context.s1,shares)
  
